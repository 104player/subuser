#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

# This command updates all or some of the installed subuser programs.
import sys
import subprocess
import subuserlib.update
#####################################################################################
def printHelp():
  print("""Update subuser-programs:
  $ subuser update [program-names] [options]
  
  OPTIONS:
  all 
      Updates all subuser-programs which have been marked as needing to be updated by the repo maintaner.
      You should run git pull before doing this in order to get an up-to-date program list.

  EXAMPLES:
    $ subuser update all
    
    # updates vim and firefox whether they are marked as needing to be updated or not.
    $ subuser update vim firefox
    
""")

#################################################################################################
if len(sys.argv) == 1 or sys.argv[1] == "help" or sys.argv[1] == "-h" or sys.argv[1] == "--help":
  printHelp()
  sys.exit()
#################################################################################################

commandOptionList = ['all']
programsToBeUpdated, userOptionList = subuserlib.commandLineArguments.parseCommandLineArgs(sys.argv[1:], commandOptionList)

if 'all' in userOptionList:
  #use this in case the user specified also some program names plus --all
  programsToBeUpdated = list(set(programsToBeUpdated + subuserlib.update.getProgramsWhosLastUpdateTimesChanged())) 

#Check if there is anything to do
if len(programsToBeUpdated) > 0:
  updateSomePrograms(programsToBeUpdated)
  # Ensure that all programs which we have requested be updated are still installed after the update:
  for program in programsToBeUpdated:
    if not subuserlib.registry.isProgramInstalled(program):
      subuserlib.installCommon.installProgramAndDependencies(program, False)
else:
  print("\nThere is nothing to be updated")
