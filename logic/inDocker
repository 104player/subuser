#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

import subprocess
import json
import sys
import os
import getpass
###############################################################
programName = sys.argv[1]
username = getpass.getuser()
cwd = os.getcwd()
home = os.path.expanduser("~")
###############################################################
def getArgsToPassToProgram():
 if len(sys.argv) > 2:
  return sys.argv[2:]
 else:
  return []

def readPermissionsFile():
 permissionsFilePath = os.path.join(home,"subuser","programsThatCanBeInstalled",programName,"permissions.json")
 permissionsFile = open(permissionsFilePath,"r")
 permissions=json.load(permissionsFile)
 permissionsFile.close()
 return permissions

def getAllowNetworkAccessArg(permissions):
 if permissions["allow-network-access"]:
  return "--networking=true"
 else:
  return "--networking=false"

def getHostSubuserHome(permissions):
 try:
  sharedHome = permissions["shared-home"]
  return os.path.join(home,"subuser","homes",sharedHome)
 except KeyError:
  return os.path.join(home,"subuser","homes",programName)

def setupHostSubuserHome(home):
 if not os.path.exists(home):
  os.makedirs(home)

def makeSystemDirVolumeArgs(systemDirs):
 return ["-v="+systemDir+":"+systemDir+":ro" for systemDir in systemDirs]

def makeUserDirVolumeArgs(userDirs):
 return ["-v="+os.path.join(home,userDir)+":"+os.path.join("/userdirs/",userDir)+":rw" for userDir in userDirs]
 
################################################################
dockerImageName = "subuser-"+programName

args=getArgsToPassToProgram()

permissions = readPermissionsFile()

allowNetworkAccessArg = getAllowNetworkAccessArg(permissions)
executable = permissions["executable"]
setupUserAndRunPath = os.path.join("/launch","setupUserAndRun")
hostSubuserHome = getHostSubuserHome(permissions)
setupHostSubuserHome(hostSubuserHome)

dockersideScriptsPath = os.path.join(home,"subuser","logic","dockerside-scripts")
dockersideBinPath = "/launch"
dockersidePWDPath = os.path.join("/home","pwd")

try:
 x11Enabled = permissions["x11"]
except KeyError:
 x11Enabled = False

if x11Enabled:
 x11Args = ["-e","DISPLAY=unix"+os.environ['DISPLAY'],"-v=/tmp/.X11-unix:/tmp/.X11-unix:rw"]
else: x11Args = []

try:
 soundEnabled = permissions["sound"]
except KeyError:
 soundEnabled = False

if soundEnabled:
 soundArgs =  ["-v=/dev/snd:/dev/snd:rw","-lxc-conf='lxc.cgroup.devices.allow = c 116:* rwm'"]
else:
 soundArgs = []

try:
 systemDirs = permissions["system-dirs"]
 systemDirVolumeArgs = makeSystemDirVolumeArgs(systemDirs)
except KeyError:
 systemDirVolumeArgs = []

def setupUserDirSymlinks(userDirs):
 """ Create symlinks to userdirs in program's home dir. """
 for userDir in userDirs:
  source = os.path.join("/userdirs/",userDir)
  destination = os.path.join(hostSubuserHome,userDir)
  if not os.path.islink(destination):
   os.symlink(source,destination)

try:
 userDirs = permissions["user-dirs"]
 setupUserDirSymlinks(userDirs)
 userDirVolumeArgs = makeUserDirVolumeArgs(userDirs)
except KeyError:
 userDirVolumeArgs = []

try:
 inheritWorkingDirectory = permissions["inherit-working-directory"]
except KeyError:
 inheritWorkingDirectory = False

if inheritWorkingDirectory:
 workingDirectoryVolumeArg = ["-v="+cwd+":/home/pwd:rw"]
else:
 workingDirectoryVolumeArg = []

volumeArgs = ["-v="+hostSubuserHome+":"+home+":rw"
 ,"-v="+dockersideScriptsPath+":"+dockersideBinPath+":ro"] + workingDirectoryVolumeArg + systemDirVolumeArgs + userDirVolumeArgs


dockerCommand = ["docker","run","-i","-t","-rm",allowNetworkAccessArg]+volumeArgs+x11Args+soundArgs+[dockerImageName,setupUserAndRunPath,username,executable]+args

#print(dockerCommand)
subprocess.call(dockerCommand)
