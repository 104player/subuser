#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

import subprocess
import json
import sys
import os
import getpass
###############################################################
programName = sys.argv[1]
username = getpass.getuser()
cwd = os.getcwd()
home = os.path.expanduser("~")
###############################################################
def getArgsToPassToProgram():
 if len(sys.argv) > 2:
  return sys.argv[2:]
 else:
  return []

def readPermissionsFile():
 permissionsFilePath = os.path.join(home,"subuser","subusers",programName,"permissions.json")
 permissionsFile = open(permissionsFilePath,"r")
 permissions=json.load(permissionsFile)
 permissionsFile.close()
 return permissions

def getAllowNetworkAccessArg(permissions):
 if permissions["allow-network-access"]:
  return "--networking=true"
 else:
  return "--networking=false"

def getHostSubuserHome(permissions):
 try:
  sharedHome = permissions["shared-home"]
  return os.path.join(home,"subuser","homes",sharedHome)
 except KeyError:
  return os.path.join(home,"subuser","homes",programName)

def setupHostSubuserHome(home):
 if not os.path.exists(home):
  os.makedirs(home)


################################################################
dockerImageName = "subuser-"+programName

args=getArgsToPassToProgram()

permissions = readPermissionsFile()

allowNetworkAccessArg = getAllowNetworkAccessArg(permissions)
executable = permissions["executable"]
setupUserAndRunPath = os.path.join("/launch","setupUserAndRun")
hostSubuserHome = getHostSubuserHome(permissions)
setupHostSubuserHome(hostSubuserHome)

dockersideScriptsPath = os.path.join(home,"subuser","logic","dockerside-scripts")
dockersideBinPath = "/launch"
dockersidePWDPath = os.path.join("/home","pwd")

volumeArgs = ["-v="+hostSubuserHome+":"+home+":rw"
 ,"-v="+dockersideScriptsPath+":"+dockersideBinPath+":ro"
 ,"-v="+cwd+":"+dockersidePWDPath+":rw"]

dockerCommand = ["docker","run","-i","-t","-rm",allowNetworkAccessArg]+volumeArgs+[dockerImageName,setupUserAndRunPath,username,executable]+args

#print(dockerCommand)
subprocess.call(dockerCommand)
